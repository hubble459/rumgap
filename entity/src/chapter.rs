//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "chapter")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub manga_id: i32,
    #[sea_orm(unique)]
    pub url: String,
    pub title: String,
    #[sea_orm(column_type = "Float")]
    pub number: f32,
    pub posted: Option<DateTimeWithTimeZone>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::chapter_offset::Entity")]
    ChapterOffset,
    #[sea_orm(
        belongs_to = "super::manga::Entity",
        from = "Column::MangaId",
        to = "super::manga::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Manga,
}

impl Related<super::chapter_offset::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChapterOffset.def()
    }
}

impl Related<super::manga::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Manga.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::chapter_offset::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::chapter_offset::Relation::Chapter.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
